import{_ as e,c as t,o,a0 as r}from"./chunks/framework.6RT3NpRm.js";const _=JSON.parse('{"title":"进阶使用","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"advanced.md","filePath":"advanced.md","lastUpdated":null}'),n={name:"advanced.md"};function d(i,a,s,l,p,c){return o(),t("div",null,a[0]||(a[0]=[r('<h1 id="进阶使用" tabindex="-1">进阶使用 <a class="header-anchor" href="#进阶使用" aria-label="Permalink to &quot;进阶使用&quot;">​</a></h1><h2 id="提升效率" tabindex="-1">提升效率 <a class="header-anchor" href="#提升效率" aria-label="Permalink to &quot;提升效率&quot;">​</a></h2><p>pyChariot 基于 python 和 JavaScript，从语言角度来说和 c cpp 等没得比。 一般而言，比较适合开发应用类的软件，如果你开发实时系统，或者需要对效率有极致的需求，那么pychariot并不适合您。</p><p>可以将 pyChariot 认为是一个访问定制网址或者网页的浏览器，所以一切针对浏览器的技巧都是使用的。 值得注意的是js扩展的使用。pyChariot内嵌了浏览器，在这两者之间的通讯相对是比较耗费资源的。 因此，尽量的少在这两者之间调用会比较好。 例如我们可以用noop来进行测试，每次的noop大概要5毫秒的时间。这在计算机领域算是比较大的耗费了。 当然，这对于人类而言，甚至意识不到（人类感知100毫秒）</p><p>但是如果追求极致的话，建议减少两者之间的交互。该 js 做的尽量js做，能合并到一起的调用，合并到一起。 例如要获知主窗口的尺寸，不要 getx gety，而是一次性的 getPos</p><h2 id="改写样式-如去掉原站广告、不想要的模块、甚至重新设计" tabindex="-1">改写样式，如去掉原站广告、不想要的模块、甚至重新设计？ <a class="header-anchor" href="#改写样式-如去掉原站广告、不想要的模块、甚至重新设计" aria-label="Permalink to &quot;改写样式，如去掉原站广告、不想要的模块、甚至重新设计？&quot;">​</a></h2><p>这更多的是前端开发技巧，可以在注入的JS中进行操作，对元素进行删改和CSS的删改。 可以通过onload当页面装载完毕时进行注入，调用主窗口方法进行 loadcss 值得注意的是，并不是所有事件都可以正确调用pyChariot对象，因此可以监听事件或者在 onload后使用扩展模块。</p><h2 id="注入-js-的逻辑-比如实现事件监听-比如说键盘快捷键" tabindex="-1">注入 JS 的逻辑，比如实现事件监听，比如说键盘快捷键？ <a class="header-anchor" href="#注入-js-的逻辑-比如实现事件监听-比如说键盘快捷键" aria-label="Permalink to &quot;注入 JS 的逻辑，比如实现事件监听，比如说键盘快捷键？&quot;">​</a></h2><p>参考例子中的相关代码，快捷键的使用技巧在这里（TODO）。 一般来说，主窗口内部的用 document.addEventListener（这里更多是基础前端的技术），全局的调用hotkey模块。</p><h2 id="web-的拖拽、滚动、特殊点击传递啥的" tabindex="-1">Web 的拖拽、滚动、特殊点击传递啥的？ <a class="header-anchor" href="#web-的拖拽、滚动、特殊点击传递啥的" aria-label="Permalink to &quot;Web 的拖拽、滚动、特殊点击传递啥的？&quot;">​</a></h2><p>用 js 控制，或者利用 auto 模块进行用户操作的模拟。</p>',11)]))}const u=e(n,[["render",d]]);export{_ as __pageData,u as default};
