import{_ as n,C as p,c as d,o as h,j as i,a0 as a,a as e,G as l}from"./chunks/framework.6RT3NpRm.js";const Y=JSON.parse('{"title":"pyChariot.api.device","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"jsapi_device.md","filePath":"jsapi_device.md","lastUpdated":1741929652000}'),r={name:"jsapi_device.md"},g={id:"isPOSIX",tabindex:"-1"},o={id:"isLinux",tabindex:"-1"},k={id:"isWindows",tabindex:"-1"},y={id:"isMacOS",tabindex:"-1"},b={id:"isFreeBSD",tabindex:"-1"},x={id:"isNetBSD",tabindex:"-1"},u={id:"isOpenBSD",tabindex:"-1"},E={id:"isBSD",tabindex:"-1"},v={id:"isSunOS",tabindex:"-1"},C={id:"isAIX",tabindex:"-1"},_={id:"getCPUCount",tabindex:"-1"},f={id:"getCPUTimes",tabindex:"-1"},c={id:"getCPUStats",tabindex:"-1"},S={id:"getCPUPercent",tabindex:"-1"},T={id:"getCPUTimesPercent",tabindex:"-1"},P={id:"getCPUFfreq",tabindex:"-1"},m={id:"getLoadAvg",tabindex:"-1"},A={id:"getVirtualMemory",tabindex:"-1"},F={id:"getSwapMemory",tabindex:"-1"},B={id:"getDiskPartitions",tabindex:"-1"},D={id:"getDiskUsage",tabindex:"-1"},I={id:"getDiskIOCounters",tabindex:"-1"},j={id:"getNetIOCounters",tabindex:"-1"},U={id:"getNetConnections",tabindex:"-1"},w={id:"getNetIFAddrs",tabindex:"-1"},N={id:"getNetIFStats",tabindex:"-1"},V={id:"getSensorsTemperatures",tabindex:"-1"},O={id:"getSensorsFans",tabindex:"-1"},L={id:"getSensorsBattery",tabindex:"-1"},R={id:"getBootTime",tabindex:"-1"},M={id:"getUsers",tabindex:"-1"};function W(X,t,q,$,H,G){const s=p("Badge");return h(),d("div",null,[t[93]||(t[93]=i("h1",{id:"pychariot-api-device",tabindex:"-1"},[e("pyChariot.api.device "),i("a",{class:"header-anchor",href:"#pychariot-api-device","aria-label":'Permalink to "pyChariot.api.device"'},"​")],-1)),t[94]||(t[94]=i("p",null,"设备信息，当前运行设备的相关信息",-1)),i("h2",g,[t[0]||(t[0]=e("isPOSIX() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[1]||(t[1]=e()),t[2]||(t[2]=i("a",{class:"header-anchor",href:"#isPOSIX","aria-label":'Permalink to "isPOSIX() <Badge type="tip" text="Since 25.3.5.1" /> {#isPOSIX}"'},"​",-1))]),t[95]||(t[95]=a('<p>操作系统是否 POSIX</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isPOSIX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",o,[t[3]||(t[3]=e("isLinux() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[4]||(t[4]=e()),t[5]||(t[5]=i("a",{class:"header-anchor",href:"#isLinux","aria-label":'Permalink to "isLinux() <Badge type="tip" text="Since 25.3.5.1" /> {#isLinux}"'},"​",-1))]),t[96]||(t[96]=a('<p>操作系统是否 Linux</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isLinux</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",k,[t[6]||(t[6]=e("isWindows() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[7]||(t[7]=e()),t[8]||(t[8]=i("a",{class:"header-anchor",href:"#isWindows","aria-label":'Permalink to "isWindows() <Badge type="tip" text="Since 25.3.5.1" /> {#isWindows}"'},"​",-1))]),t[97]||(t[97]=a('<p>操作系统是否 Windows</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isWindows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",y,[t[9]||(t[9]=e("isMacOS() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[10]||(t[10]=e()),t[11]||(t[11]=i("a",{class:"header-anchor",href:"#isMacOS","aria-label":'Permalink to "isMacOS() <Badge type="tip" text="Since 25.3.5.1" /> {#isMacOS}"'},"​",-1))]),t[98]||(t[98]=a('<p>操作系统是否 MacOS</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isMacOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",b,[t[12]||(t[12]=e("isFreeBSD() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[13]||(t[13]=e()),t[14]||(t[14]=i("a",{class:"header-anchor",href:"#isFreeBSD","aria-label":'Permalink to "isFreeBSD() <Badge type="tip" text="Since 25.3.5.1" /> {#isFreeBSD}"'},"​",-1))]),t[99]||(t[99]=a('<p>操作系统是否 FreeBSD</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isFreeBSD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",x,[t[15]||(t[15]=e("isNetBSD() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[16]||(t[16]=e()),t[17]||(t[17]=i("a",{class:"header-anchor",href:"#isNetBSD","aria-label":'Permalink to "isNetBSD() <Badge type="tip" text="Since 25.3.5.1" /> {#isNetBSD}"'},"​",-1))]),t[100]||(t[100]=a('<p>操作系统是否 NetBSD</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNetBSD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",u,[t[18]||(t[18]=e("isOpenBSD() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[19]||(t[19]=e()),t[20]||(t[20]=i("a",{class:"header-anchor",href:"#isOpenBSD","aria-label":'Permalink to "isOpenBSD() <Badge type="tip" text="Since 25.3.5.1" /> {#isOpenBSD}"'},"​",-1))]),t[101]||(t[101]=a('<p>操作系统是否 OpenBSD</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isOpenBSD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",E,[t[21]||(t[21]=e("isBSD() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[22]||(t[22]=e()),t[23]||(t[23]=i("a",{class:"header-anchor",href:"#isBSD","aria-label":'Permalink to "isBSD() <Badge type="tip" text="Since 25.3.5.1" /> {#isBSD}"'},"​",-1))]),t[102]||(t[102]=a('<p>操作系统是否 BSD</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isBSD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",v,[t[24]||(t[24]=e("isSunOS() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[25]||(t[25]=e()),t[26]||(t[26]=i("a",{class:"header-anchor",href:"#isSunOS","aria-label":'Permalink to "isSunOS() <Badge type="tip" text="Since 25.3.5.1" /> {#isSunOS}"'},"​",-1))]),t[103]||(t[103]=a('<p>操作系统是否 SunOS</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isSunOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",C,[t[27]||(t[27]=e("isAIX() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[28]||(t[28]=e()),t[29]||(t[29]=i("a",{class:"header-anchor",href:"#isAIX","aria-label":'Permalink to "isAIX() <Badge type="tip" text="Since 25.3.5.1" /> {#isAIX}"'},"​",-1))]),t[104]||(t[104]=a('<p>操作系统是否 AIX</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isAIX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",_,[t[30]||(t[30]=e("getCPUCount(logical) ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[31]||(t[31]=e()),t[32]||(t[32]=i("a",{class:"header-anchor",href:"#getCPUCount","aria-label":'Permalink to "getCPUCount(logical) <Badge type="tip" text="Since 25.3.5.1" /> {#getCPUCount}"'},"​",-1))]),t[105]||(t[105]=a('<p>获取 CPU 数量</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">logic</td><td style="text-align:left;">boolean</td><td style="text-align:left;">逻辑处理器，可忽略，默认为 true</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">int</td><td style="text-align:left;">CPU 数量</td></tr></tbody></table><p>如果 logical 为 false，仅返回物理内核的数量。如果 logical 为 true，返回逻辑内核的数量。 在 OpenBSD 和 NetBSD 上总是返回 null。 请注意， 可能不一定等于当前进程可以使用的实际 CPU 数量。 如果进程 CPU 亲和性已更改、正在使用 Linux cgroups 或（在 Windows 的情况下）在使用处理器组或具有超过 64 个 CPU 的系统上，这可能会有所不同。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPUCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPUCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>',6)),i("h2",f,[t[33]||(t[33]=e("getCPUTimes(percpu) ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[34]||(t[34]=e()),t[35]||(t[35]=i("a",{class:"header-anchor",href:"#getCPUTimes","aria-label":'Permalink to "getCPUTimes(percpu) <Badge type="tip" text="Since 25.3.5.1" /> {#getCPUTimes}"'},"​",-1))]),t[106]||(t[106]=a('<p>获取 CPU 时间信息</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">percpu</td><td style="text-align:left;">boolean</td><td style="text-align:left;">详细列出每个内核，可忽略，默认为 false</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">object 或 list[object]</td><td style="text-align:left;">CPU 时间信息</td></tr></tbody></table><p>列出CPU时间信息，其中每个属性代表 CPU 在给定模式下花费的秒数。属性可用性因平台而异。</p><ul><li>user: 进程在用户模式(user mode)下执行所花费的时间； 在 Linux 上，这也包括访客时间(guest time)；</li><li>system: 进程在内核模式(kernel mode)下执行所花费的时间；</li><li>idle: 空闲时间；</li></ul><p>特定平台的字段:</p><ul><li>nice (UNIX): niced(优先) 进程在用户模式(user mode)下所花费的时间; 在 Linux 上，这也包括访客优先时间(guest_nice time)；</li><li>iowait (Linux): 等待 I/O 完成所花费的时间。 这不计入空闲时间中；</li><li>irq (Linux, BSD): 服务硬件中断所花费的时间；</li><li>softirq (Linux): 服务软件中断所花费的时间；</li><li>steal (Linux 2.6.11+): 在虚拟化环境中运行的其他操作系统所花费的时间；</li><li>guest (Linux 2.6.24+): 在 Linux 内核的控制下为客户操作系统运行虚拟 CPU 所花费的时间；</li><li>guest_nice (Linux 3.2.0+): niced(优先) 访客进程所花费的时间 (用于在 Linux 内核控制下的客户操作系统的虚拟 CPU)；</li><li>interrupt (Windows): 服务硬件中断所花费的时间 ( 类似于 UNIX 上的 “irq”)；</li><li>dpc (Windows): 服务延迟过程调用服务中断 (DPC) 所花费的时间； DPC 是运行优先级低于标准中断(interrupts)的中断；</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPUTimes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPUTimes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>',9)),i("h2",c,[t[36]||(t[36]=e("getCPUStats() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[37]||(t[37]=e()),t[38]||(t[38]=i("a",{class:"header-anchor",href:"#getCPUStats","aria-label":'Permalink to "getCPUStats() <Badge type="tip" text="Since 25.3.5.1" /> {#getCPUStats}"'},"​",-1))]),t[107]||(t[107]=a('<p>获取 CPU 统计信息</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">array[number]</td><td style="text-align:left;">CPU 统计信息</td></tr></tbody></table><p>CPU 统计信息：</p><ul><li>ctx_switches: 自启动以来的上下文切换次数（自愿 + 非自愿）；</li><li>interrupts: 自启动以来的中断数；</li><li>soft_interrupts: 自启动以来的软件中断数。 在 Windows 和 SunOS 上始终为 0；</li><li>syscalls: 自启动以来的系统调用数。 在 Linux 上始终为 0；</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPUStats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',5)),i("h2",S,[t[39]||(t[39]=e("getCPUPercent(percpu) ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[40]||(t[40]=e()),t[41]||(t[41]=i("a",{class:"header-anchor",href:"#getCPUPercent","aria-label":'Permalink to "getCPUPercent(percpu) <Badge type="tip" text="Since 25.3.5.1" /> {#getCPUPercent}"'},"​",-1))]),t[108]||(t[108]=a('<p>获取 CPU 利用率</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">percpu</td><td style="text-align:left;">boolean</td><td style="text-align:left;">详细列出每个内核，可忽略，默认为 false</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">number 或 list[number]</td><td style="text-align:left;">CPU 利用率信息</td></tr></tbody></table><p>如果 percpu 忽略或为 false，返回一个浮点数，以百分比形式表示当前系统范围内的 CPU 利用率。 如果 percpu 为 true，返回一个浮点数的 list，其中的元素为每个 CPU 的利用率信息。</p><p><em><strong>第一次调用它时，会返回一个您应该忽略的无意义的 0.0 值。为了准确起见，建议在两次调用之间至少间隔 0.1 秒来调用此函数。</strong></em></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPUPercent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPUPercent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>',7)),i("h2",T,[t[42]||(t[42]=e("getCPUTimesPercent(percpu) ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[43]||(t[43]=e()),t[44]||(t[44]=i("a",{class:"header-anchor",href:"#getCPUTimesPercent","aria-label":'Permalink to "getCPUTimesPercent(percpu) <Badge type="tip" text="Since 25.3.5.1" /> {#getCPUTimesPercent}"'},"​",-1))]),t[109]||(t[109]=a('<p>获取 CPU 时间利用率百分比</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">percpu</td><td style="text-align:left;">boolean</td><td style="text-align:left;">详细列出每个内核，可忽略，默认为 false</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">object 或 list[object]</td><td style="text-align:left;">CPU 利用率信息</td></tr></tbody></table><p>如果 percpu 忽略或为 false，返回对象，以百分比形式表示当前系统范围内的 CPU 时间利用率。 如果 percpu 为 true，返回一个浮点数的 list，其中的元素为每个 CPU 的时间利用率信息。</p><p>在 Linux 上，“guest”和“guest_nice”百分比不计入“user”和“user_nice”百分比。</p><p><em><strong>第一次调用它时，会返回一个您应该忽略的无意义的 0.0 值。为了准确起见，建议在两次调用之间至少间隔 0.1 秒来调用此函数。</strong></em></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPUTimesPercent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPUTimesPercent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>',8)),i("h2",P,[t[45]||(t[45]=e("getCPUFfreq(percpu) ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[46]||(t[46]=e()),t[47]||(t[47]=i("a",{class:"header-anchor",href:"#getCPUFfreq","aria-label":'Permalink to "getCPUFfreq(percpu) <Badge type="tip" text="Since 25.3.5.1" /> {#getCPUFfreq}"'},"​",-1))]),t[110]||(t[110]=a('<p>获取 CPU 频率</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">percpu</td><td style="text-align:left;">boolean</td><td style="text-align:left;">详细列出每个内核，可忽略，默认为 false</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">object 或 list[object]</td><td style="text-align:left;">CPU 频率信息</td></tr></tbody></table><p>如果 percpu 忽略或为 false，返回对象，以百分比形式表示当前系统范围内的 CPU 频率。 如果 percpu 为 true，返回一个浮点数的 list，其中的元素为每个 CPU 的频率。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPUFfreq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPUFfreq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>',6)),i("h2",m,[t[48]||(t[48]=e("getLoadAvg() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[49]||(t[49]=e()),t[50]||(t[50]=i("a",{class:"header-anchor",href:"#getLoadAvg","aria-label":'Permalink to "getLoadAvg() <Badge type="tip" text="Since 25.3.5.1" /> {#getLoadAvg}"'},"​",-1))]),t[111]||(t[111]=a('<p>获取系统平均负载。</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">array</td><td style="text-align:left;">包括3个元素，分别为 过去 1、5 和 15 分钟的平均系统负载</td></tr></tbody></table><p>“负载”表示处于可运行状态的进程，要么使用 CPU，要么等待使用 CPU（例如，等待磁盘 I/O）。</p><ul><li>Unix 中，和 <code>update</code> 命令的意义相同；</li><li>在 Windows 上是通过 Windows API 模拟的，因此第一次调用它，在接下来的 5 秒内，将返回一个无意义的 (0.0, 0.0, 0.0)；</li></ul><p>返回的数字仅在与系统上安装的 CPU 内核数相关时才有意义。例如，具有 10 个逻辑 CPU 的系统上的值 3.14 意味着系统负载在过去 N 分钟内为 31.4%。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLoadAvg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',6)),i("h2",A,[t[51]||(t[51]=e("getVirtualMemory() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[52]||(t[52]=e()),t[53]||(t[53]=i("a",{class:"header-anchor",href:"#getVirtualMemory","aria-label":'Permalink to "getVirtualMemory() <Badge type="tip" text="Since 25.3.5.1" /> {#getVirtualMemory}"'},"​",-1))]),t[112]||(t[112]=a('<p>获取系统内存使用状况。</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">object</td><td style="text-align:left;">内存使用信息</td></tr></tbody></table><p>对象中的信息属性如下：</p><ul><li>total: 总物理内存（独占交换）；</li><li>available: 可以立即分配给进程而无需系统进行交换的内存。这是通过根据平台对不同的内存值求和来计算的，它应该用于以跨平台方式监控实际内存使用情况；</li></ul><p>其他数据:</p><ul><li>used: 使用的内存，计算方式因平台而异，仅供参考。 total - free 不一定匹配 used；</li><li>free: 根本没有使用（归零）的随时可用的内存； 请注意，这并不反映实际可用内存（请改用可用(available)内存）。 total - used 不一定匹配 free；</li><li>active (UNIX): 当前正在使用或最近使用的内存，因此它在 RAM 中；</li><li>inactive (UNIX): 标记为未使用的内存；</li><li>buffers (Linux, BSD): 缓存文件系统元数据等内容；</li><li>cached (Linux, BSD): 缓存各种东西；</li><li>shared (Linux, BSD): 可以被多个进程同时访问的内存；</li><li>slab (Linux): 内核数据结构缓存；</li><li>wired (BSD, macOS): 标记为始终保留在 RAM 中的内存。 它永远不会移动到磁盘；</li></ul><p>已用 (used) 和可用 (available) 的总和不一定等于总数 (total)。 在 Windows 上可用 (available) 和空闲 (free) 是一样的。</p><p>如果您只想知道跨平台方式还剩下多少物理内存，只需依赖可用 (available) 字段即可。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getVirtualMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;当前可用内存：&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getVirtualMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).available)</span></span></code></pre></div>',10)),i("h2",F,[t[54]||(t[54]=e("getSwapMemory() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[55]||(t[55]=e()),t[56]||(t[56]=i("a",{class:"header-anchor",href:"#getSwapMemory","aria-label":'Permalink to "getSwapMemory() <Badge type="tip" text="Since 25.3.5.1" /> {#getSwapMemory}"'},"​",-1))]),t[113]||(t[113]=a('<p>获取系统交换内存使用状况。</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">object</td><td style="text-align:left;">内存使用信息</td></tr></tbody></table><p>系统交换内存统计信息，包括以下字段：</p><ul><li>total: 以字节为单位的总交换内存；</li><li>used: 使用的交换内存（以字节为单位）；</li><li>free: 以字节为单位的空闲交换内存；</li><li>percent: 百分比使用率计算为 (total - available) / total * 100；</li><li>sin: 系统从磁盘换入的字节数（累计）；</li><li>sout: 系统从磁盘换出的字节数（累计）；</li></ul><p>操作系统差异性：</p><ul><li>Windows 上的 sin 和 sout 始终设置为 0；</li><li>Linux 上，依赖 /proc fs 而不是 sysinfo() 系统调用；</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSwapMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',7)),i("h2",B,[t[57]||(t[57]=e("getDiskPartitions(all) ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[58]||(t[58]=e()),t[59]||(t[59]=i("a",{class:"header-anchor",href:"#getDiskPartitions","aria-label":'Permalink to "getDiskPartitions(all) <Badge type="tip" text="Since 25.3.5.1" /> {#getDiskPartitions}"'},"​",-1))]),t[114]||(t[114]=a('<p>获取设备挂在的磁盘分区信息</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">all</td><td style="text-align:left;">boolean</td><td style="text-align:left;">是否列出所有磁盘信息，可忽略，默认为 false</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">list[object]</td><td style="text-align:left;">列表，每个元素为一个磁盘分区的信息</td></tr></tbody></table><p>获取设备挂在的磁盘分区信息，包括设备、挂载点和文件系统类型，类似于 UNIX 上的“df”命令。 如果 all 参数为 False，它会尝试仅区分和返回物理设备（例如硬盘、CD-ROM 驱动器、USB 密钥）并忽略所有其他设备（例如伪(pseudo) 、内存、重复、无法访问的文件系统）。</p><p>请注意，all 参数并非在所有系统上都完全可靠（例如，在 BSD 上，此参数被忽略）。</p><p>列表中的每个元素说明一个磁盘分区的详细信息，包括以下属性：</p><ul><li>device: 设备路径（例如“/dev/hda1”）。在 Windows 上，这是驱动器号（例如“C:\\”）。</li><li>mountpoint: 挂载点路径（例如“/”）。在 Windows 上，这是驱动器号（例如“C:\\”）。</li><li>fstype: 分区文件系统（例如 UNIX 上的“ext3”或 Windows 上的“NTFS”）。</li><li>opts: 一个逗号分隔的字符串，指示驱动器/分区的不同挂载选项。平台相关。</li><li>maxfile: 文件名可以具有的最大长度。平台相关。</li><li>maxpath: 路径名（目录名 + 基本文件名）的最大长度。平台相关。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDiskPartitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDiskPartitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>',9)),i("h2",D,[t[60]||(t[60]=e("getDiskUsage(path) ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[61]||(t[61]=e()),t[62]||(t[62]=i("a",{class:"header-anchor",href:"#getDiskUsage","aria-label":'Permalink to "getDiskUsage(path) <Badge type="tip" text="Since 25.3.5.1" /> {#getDiskUsage}"'},"​",-1))]),t[115]||(t[115]=a('<p>获取指定路径的磁盘使用统计信息</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">path</td><td style="text-align:left;">string</td><td style="text-align:left;">路径，可忽略，默认为 PYCHARIOT_HOME</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">object</td><td style="text-align:left;">使用统计信息</td></tr></tbody></table><p>使用统计信息包括以下属性：</p><ul><li>total: 以字节表示的总空间；</li><li>used: 以字节表示的已用空间</li><li>free: 以字节表示的可用空间；</li><li>percent: 使用百分比；</li></ul><p><em>这些值和 “df” 命令行程序是一致的。</em></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDiskUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDiskUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>',8)),i("h2",I,[t[63]||(t[63]=e("getDiskIOCounters(perdisk, nowrap) ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[64]||(t[64]=e()),t[65]||(t[65]=i("a",{class:"header-anchor",href:"#getDiskIOCounters","aria-label":'Permalink to "getDiskIOCounters(perdisk, nowrap) <Badge type="tip" text="Since 25.3.5.1" /> {#getDiskIOCounters}"'},"​",-1))]),t[116]||(t[116]=a('<p>获取磁盘 IO 统计信息</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">perdisk</td><td style="text-align:left;">boolean</td><td style="text-align:left;">默认为 false</td></tr><tr><td style="text-align:left;">nowrap</td><td style="text-align:left;">boolean</td><td style="text-align:left;">默认为 false</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">object</td><td style="text-align:left;">磁盘 IO 统计信息</td></tr></tbody></table><p>返回系统范围的磁盘 I/O 统计信息，包括以下属性：</p><ul><li>read_count: 读取次数</li><li>write_count: 写入次数</li><li>read_bytes: 读取的字节数</li><li>write_bytes: 写入的字节数</li></ul><p>特定于平台的属性:</p><ul><li>read_time(除了 NetBSD 和 OpenBSD): 从磁盘读取所花费的时间（以毫秒为单位）</li><li>write_time(除了 NetBSD 和 OpenBSD): 写入磁盘所花费的时间（以毫秒为单位）</li><li>busy_time(Linux, FreeBSD): 花费在实际 I/O 上的时间（以毫秒为单位）</li><li>read_merged_count (Linux): 合并读取的数量（参见 iostats 文档）</li><li>write_merged_count (Linux): 合并写入的数量（请参阅 iostats 文档）</li></ul><p>如果 perdisk 为 True ，则返回系统上安装的每个物理磁盘的相同信息，分区名称作为键。</p><p>在某些系统（例如Linux）上，在非常繁忙或寿命很长的系统上，内核返回的数字可能会溢出并换行（从零开始）。</p><p>如果 nowrap 为 True，函数调用中检测并调整这些数字，并将“旧值”添加到“新值”，以便返回的数字始终增加或保持不变，但永远不会减少。 disk_io_counters.cache_clear() 可用于使 nowrap 缓存无效。 在 Windows 上，可能需要首先从 cmd.exe 发出 diskperf -y 命令以启用 IO 计数器。 在无盘机器上，如果 perdisk 为 True，此函数将返回 null 或 {}。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDiskIOCounters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',11)),i("h2",j,[t[66]||(t[66]=e("getNetIOCounters(pernic, nowrap) ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[67]||(t[67]=e()),t[68]||(t[68]=i("a",{class:"header-anchor",href:"#getNetIOCounters","aria-label":'Permalink to "getNetIOCounters(pernic, nowrap) <Badge type="tip" text="Since 25.3.5.1" /> {#getNetIOCounters}"'},"​",-1))]),t[117]||(t[117]=a('<p>获取网络 IO 统计信息</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">pernic</td><td style="text-align:left;">boolean</td><td style="text-align:left;">默认为 false</td></tr><tr><td style="text-align:left;">nowrap</td><td style="text-align:left;">boolean</td><td style="text-align:left;">默认为 false</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">object</td><td style="text-align:left;">网络 IO 统计信息</td></tr></tbody></table><p>返回系统范围的网络 I/O 统计信息，包括以下属性：</p><ul><li>bytes_sent: 发送的字节数</li><li>bytes_recv: 接收的字节数</li><li>packets_sent: 发送的数据包数</li><li>packets_recv: 收到的数据包数</li><li>errin: 接收时的错误总数</li><li>errout: 发送时的错误总数</li><li>dropin: 丢弃的传入数据包总数</li><li>dropout: 丢弃的传出数据包总数（在 macOS 和 BSD 上始终为 0）</li></ul><p>如果 pernic 为 True，则返回系统上安装的每个网络接口的相同信息，其中网络接口名称作为键。</p><p>在某些系统（例如 Linux）上，在非常繁忙或寿命很长的系统上，内核返回的数字可能会溢出并换行（从 0 开始）。</p><p>如果 nowrap 为 True ，将在函数调用中检测并调整这些数字，并将“旧值”添加到“新值”，以便返回的数字始终增加或保持不变，但永远不会减少。 net_io_counters.cache_clear() 可用于使 nowrap 缓存无效。 在没有网络接口的机器上，如果 pernic 为 True ，此函数将返回 null 或 {}。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDiskIOCounters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',9)),i("h2",U,[t[69]||(t[69]=e("getNetConnections(kind) ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[70]||(t[70]=e()),t[71]||(t[71]=i("a",{class:"header-anchor",href:"#getNetConnections","aria-label":'Permalink to "getNetConnections(kind) <Badge type="tip" text="Since 25.3.5.1" /> {#getNetConnections}"'},"​",-1))]),t[118]||(t[118]=a('<p>获取系统网络连接信息</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">kind</td><td style="text-align:left;">string</td><td style="text-align:left;">网卡设备类型，默认为 inet （以太网）</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">list[object]</td><td style="text-align:left;">网络连接信息</td></tr></tbody></table><p>返回系统网络连接信息列表，每个元素具体说明一个连接的信息，包含的属性视操作系统有差异。 Windows 下包括以下属性：</p><ul><li>family: 地址族；</li><li>laddr: 本地地址；</li><li>raddr: 远程地址；</li><li>status: 连接的状态</li><li>pid: 相关 pid</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNetConnections</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',6)),i("h2",w,[t[72]||(t[72]=e("getNetIFAddrs() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[73]||(t[73]=e()),t[74]||(t[74]=i("a",{class:"header-anchor",href:"#getNetIFAddrs","aria-label":'Permalink to "getNetIFAddrs() <Badge type="tip" text="Since 25.3.5.1" /> {#getNetIFAddrs}"'},"​",-1))]),t[119]||(t[119]=a('<p>获取系统网络接口信息</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">list[object]</td><td style="text-align:left;">网络接口列表</td></tr></tbody></table><p>返回系统网络接口信息列表，元素为网络接口信息，包括以下属性：</p><ul><li>family: 地址族；</li><li>address: 主 NIC 地址（始终设置）；</li><li>netmask: 网络掩码地址（可能是 null ）；</li><li>broadcast: 广播地址（可能是 null ）；</li><li>ptp: 代表“点对点”(point to point)； 它是点对点接口（通常是 VPN）上的目标地址。 广播和 ptp 是互斥的。 可能为 null；</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNetIFAddrs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',5)),i("h2",N,[t[75]||(t[75]=e("getNetIFStats() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[76]||(t[76]=e()),t[77]||(t[77]=i("a",{class:"header-anchor",href:"#getNetIFStats","aria-label":'Permalink to "getNetIFStats() <Badge type="tip" text="Since 25.3.5.1" /> {#getNetIFStats}"'},"​",-1))]),t[120]||(t[120]=a('<p>获取系统网络接口状态信息</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">list[object]</td><td style="text-align:left;">网络接口列表</td></tr></tbody></table><p>网络接口当前状态信息列表，元素包括以下属性：</p><ul><li>isup: 是否已启用；</li><li>duplex: 双工通信类型；</li><li>speed: 以兆位 (MB) 表示的 NIC 速度，如果无法确定（例如“本地主机”），则为 0；</li><li>mtu: NIC 的最大传输单位，以字节为单位；</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNetIFStats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',5)),i("h1",V,[t[78]||(t[78]=e("getSensorsTemperatures(fahrenheit) ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[79]||(t[79]=e()),t[80]||(t[80]=i("a",{class:"header-anchor",href:"#getSensorsTemperatures","aria-label":'Permalink to "getSensorsTemperatures(fahrenheit) <Badge type="tip" text="Since 25.3.5.1" /> {#getSensorsTemperatures}"'},"​",-1))]),t[121]||(t[121]=a('<p>获取温度传感器数据</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">fahrenheit</td><td style="text-align:left;">boolean</td><td style="text-align:left;">是否使用华氏度，默认为 false</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">list[object]</td><td style="text-align:left;"></td></tr></tbody></table><p>返回温度传感器数据列表，如果硬件或操作系统不支持，则返回空列表。当前仅支持 Linux, FreeBSD。 元素包含以下属性：</p><ul><li>label: 传感器名称</li><li>current: 当前温度</li><li>high: 最高温度</li><li>critical: 警告温度</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSensorsTemperatures</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',6)),i("h1",O,[t[81]||(t[81]=e("getSensorsFans() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[82]||(t[82]=e()),t[83]||(t[83]=i("a",{class:"header-anchor",href:"#getSensorsFans","aria-label":'Permalink to "getSensorsFans() <Badge type="tip" text="Since 25.3.5.1" /> {#getSensorsFans}"'},"​",-1))]),t[122]||(t[122]=a('<p>获取风扇转速数据</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">list[object]</td><td style="text-align:left;"></td></tr></tbody></table><p>返回风扇转速数据列表，如果硬件或操作系统不支持，则返回空列表（当前支持 Linux, FreeBSD）。 元素包含以下属性：</p><ul><li>label: 风扇名称</li><li>current: 当前转速（RPM，即 每分钟转数）；</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSensorsFans</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',5)),i("h1",L,[t[84]||(t[84]=e("getSensorsBattery() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[85]||(t[85]=e()),t[86]||(t[86]=i("a",{class:"header-anchor",href:"#getSensorsBattery","aria-label":'Permalink to "getSensorsBattery() <Badge type="tip" text="Since 25.3.5.1" /> {#getSensorsBattery}"'},"​",-1))]),t[123]||(t[123]=a('<p>获取电池信息</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">object</td><td style="text-align:left;"></td></tr></tbody></table><p>返回获取电池信息数据，如果硬件或操作系统不支持，则返回空数据，（当前支持 Linux, FreeBSD，Windows， MacOS）包含以下属性：</p><ul><li>percent: 电池电量剩余百分比；</li><li>secsleft: 电池电量耗尽前还剩多少秒的粗略近似值；</li><li>power_plugged: 是否连接了交流电源线，无法确定则为 null；</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSensorsBattery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',5)),i("h1",R,[t[87]||(t[87]=e("getBootTime() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[88]||(t[88]=e()),t[89]||(t[89]=i("a",{class:"header-anchor",href:"#getBootTime","aria-label":'Permalink to "getBootTime() <Badge type="tip" text="Since 25.3.5.1" /> {#getBootTime}"'},"​",-1))]),t[124]||(t[124]=a('<p>获取系统已启动时间</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">number</td><td style="text-align:left;"></td></tr></tbody></table><p>返回自纪元(epoch)以来以秒表示的系统启动时间，在 Windows 上，如果它在不同的进程中使用，这个函数可能会返回一个减少(off by) 1 秒的时间。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBootTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',4)),i("h2",M,[t[90]||(t[90]=e("getUsers() ")),l(s,{type:"tip",text:"Since 25.3.5.1"}),t[91]||(t[91]=e()),t[92]||(t[92]=i("a",{class:"header-anchor",href:"#getUsers","aria-label":'Permalink to "getUsers() <Badge type="tip" text="Since 25.3.5.1" /> {#getUsers}"'},"​",-1))]),t[125]||(t[125]=a('<p>获取已连接到系统的用户信息</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">list[object]</td><td style="text-align:left;">用户信息列表</td></tr></tbody></table><p>返回当前已连接到系统的用户信息，包括以下字段：</p><ul><li>name: 用户名.</li><li>terminal: 与用户关联的 tty 或 伪tty ，如果有，否则为 None 。</li><li>host: 与条目关联的主机名（如果有）。</li><li>started: 创建时间作为一个浮点数，以自纪元（epoch）以来的秒数表示。</li><li>pid: 登录进程的 pid（如 sshd、tmux、gdm-session-worker 等）。 在 Windows 和 OpenBSD 上，pid 始终为 null 。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',5))])}const z=n(r,[["render",W]]);export{Y as __pageData,z as default};
