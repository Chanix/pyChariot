import{_ as e,c as a,o as s,a0 as n}from"./chunks/framework.6RT3NpRm.js";const x=JSON.parse('{"title":"PYCHARIOT_HOME/pyChariot.files/appchips","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"dir-appchips.md","filePath":"dir-appchips.md","lastUpdated":null}'),l={name:"dir-appchips.md"};function i(p,t,d,r,o,h){return s(),a("div",null,t[0]||(t[0]=[n(`<h1 id="pychariot-home-pychariot-files-appchips" tabindex="-1">PYCHARIOT_HOME/pyChariot.files/appchips <a class="header-anchor" href="#pychariot-home-pychariot-files-appchips" aria-label="Permalink to &quot;PYCHARIOT_HOME/pyChariot.files/appchips&quot;">​</a></h1><p>运行于 pyChariot 上的 WebApp，称为小应用 <code>appchip</code>。 <em>嗯……本来想叫 “appclip”的，打错了……不过无论是 “薯片”还是 “芯片”，我都喜欢，就叫 <code>appchip</code> 吧 😃</em></p><p>所有小应用的程序包文件存放在 appchips 下，以小应用标识作为目录名称，结构如下：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    appchip_id                          # 小应用程序包目录，目录名即小应用标识</span></span>
<span class="line"><span>        |   appchip.json                # 小应用的描述文件</span></span>
<span class="line"><span>        |   appchip.ico                 # 小应用的窗口图标（可选），Windows。</span></span>
<span class="line"><span>        |</span></span>
<span class="line"><span>        +---js                          # 小应用使用的 JavaScript 脚本文件目录</span></span>
<span class="line"><span>        |   |    inject.js              # 小应用的自定义主窗口注入脚本。</span></span>
<span class="line"><span>        |   |</span></span>
<span class="line"><span>        |   \\--- hotkeys                # 系统级热键脚本目录：</span></span>
<span class="line"><span>        |           f1.js               #    热键 f1 对应的脚本；</span></span>
<span class="line"><span>        |           ctrl+f1.js          #    热键 ctrl+f1 对应的脚本；</span></span>
<span class="line"><span>        |           mainwin_on_xxx.js   #    主窗口事件自定义脚本；</span></span>
<span class="line"><span>        |           ... ...</span></span>
<span class="line"><span>        |</span></span>
<span class="line"><span>        \\---webroot                     # 小应用 httpd 使用的文件</span></span>
<span class="line"><span>                                        #   本地 httpd 服务器将以本目录作为 / 。</span></span></code></pre></div><h2 id="appchip.json" tabindex="-1">./appchip.json <a class="header-anchor" href="#appchip.json" aria-label="Permalink to &quot;./appchip.json {#appchip.json}&quot;">​</a></h2><p>小应用的描述配置文件：</p><table tabindex="0"><thead><tr><th style="text-align:left;">项目</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">name</td><td style="text-align:left;">名称，默认为小应用的标识（即目录名）</td></tr><tr><td style="text-align:left;">version</td><td style="text-align:left;">版本号，建议使用 <code>9.9.9.9</code> 的格式</td></tr><tr><td style="text-align:left;">description</td><td style="text-align:left;">描述</td></tr><tr><td style="text-align:left;">url</td><td style="text-align:left;">浏览器网址，若存在 html 则忽略</td></tr><tr><td style="text-align:left;">html</td><td style="text-align:left;">浏览器 html 代码</td></tr><tr><td style="text-align:left;">win_title</td><td style="text-align:left;">窗口标题，默认为 {name} {version}</td></tr><tr><td style="text-align:left;">win_width</td><td style="text-align:left;">窗口宽度</td></tr><tr><td style="text-align:left;">win_height</td><td style="text-align:left;">窗口高度</td></tr><tr><td style="text-align:left;">win_min_width</td><td style="text-align:left;">窗口最小宽度</td></tr><tr><td style="text-align:left;">win_min_height</td><td style="text-align:left;">窗口最小高度</td></tr><tr><td style="text-align:left;">win_hidden</td><td style="text-align:left;">是否隐藏窗口</td></tr><tr><td style="text-align:left;">win_confirm_close</td><td style="text-align:left;">关闭窗口时是否需要确认</td></tr><tr><td style="text-align:left;">win_on_top</td><td style="text-align:left;">窗口是否总是在前面</td></tr><tr><td style="text-align:left;">win_resizable</td><td style="text-align:left;">窗口可否改变大小</td></tr><tr><td style="text-align:left;">win_fullscreen</td><td style="text-align:left;">窗口是否全屏显示</td></tr><tr><td style="text-align:left;">text_select</td><td style="text-align:left;">是否可以选取窗口内的文本</td></tr></tbody></table><p>pyChariot 启动后，会根据指定的小应用标识读取该文件（默认小应用为 default），然后对该小应用进行装载、启动、运行。</p><h2 id="js" tabindex="-1">./js <a class="header-anchor" href="#js" aria-label="Permalink to &quot;./js{#js}&quot;">​</a></h2><p>小应用 JavaScript 脚本存储目录。</p><h2 id="js.inject.js" tabindex="-1">./js/inject.js <a class="header-anchor" href="#js.inject.js" aria-label="Permalink to &quot;./js/inject.js{#js.inject.js}&quot;">​</a></h2><p>主窗口打开后执行该脚本文件，运行此脚本时，扩展功能模块和常用变量已就绪，可以正常使用； 除非您熟悉 pyChariot，否则不建议使用该脚本。 在使用之前，请先了解注入脚本顺序</p><h2 id="js.mainwin_on.js" tabindex="-1">./js/mainwin_on_xxxxxx.js <a class="header-anchor" href="#js.mainwin_on.js" aria-label="Permalink to &quot;./js/mainwin_on_xxxxxx.js{#js.mainwin_on.js}&quot;">​</a></h2><p>js/mainwin_on_xxxxx.js 主窗口的事件注入自定义脚本，即，当发生事件事，执行对应的脚本；</p><table tabindex="0"><thead><tr><th style="text-align:left;">脚本</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">mainwin_on_loaded.js</td><td style="text-align:left;">主窗口装载完成后，执行该自定义脚本。</td></tr><tr><td style="text-align:left;">mainwin_on_shown.js</td><td style="text-align:left;"></td></tr></tbody></table><h2 id="js.hotkeys" tabindex="-1">./js/hotkeys <a class="header-anchor" href="#js.hotkeys" aria-label="Permalink to &quot;./js/hotkeys{#js.hotkeys}&quot;">​</a></h2><p>hotkeys 目录下存放系统级热键定义，以热键的按键为文件名，当热键被按下时，在主窗口内执行其中的脚本代码；</p>`,17)]))}const f=e(l,[["render",i]]);export{x as __pageData,f as default};
