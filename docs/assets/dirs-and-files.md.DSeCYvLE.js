import{_ as s,c as p,o as n,a0 as i}from"./chunks/framework.6RT3NpRm.js";const _=JSON.parse('{"title":"文件目录结构","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"dirs-and-files.md","filePath":"dirs-and-files.md","lastUpdated":1741653582000}'),e={name:"dirs-and-files.md"};function l(t,a,o,c,d,r){return n(),p("div",null,a[0]||(a[0]=[i(`<h1 id="文件目录结构" tabindex="-1">文件目录结构 <a class="header-anchor" href="#文件目录结构" aria-label="Permalink to &quot;文件目录结构&quot;">​</a></h1><p>pyChariot 被设计为方便迁移的绿色软件，所有文件皆保存于 <code>pyChariot 主目录</code> 之下。</p><ul><li>可执行文件所在目录，即为 <code>pyChariot 主目录</code>，简称：<code>PYCHARIOT_HOME</code>；</li><li>运行后，会在主目录内创建新目录 <code>pyChariot.files</code> （如果不存在的话）；</li></ul><p><br>由于这样的设计，迁移、删除或者复制您的 pyChariot 环境，只需对主目录进行文件操作即可：</p><ul><li>使用时，可以保存在移动存储设备上，随身携带，即插即用;</li><li>复制时，完整复制目录即可，与原环境完全一致;</li><li>删除时，删除目录即可，不留任何垃圾。</li></ul><p><br>以 Windows 为例，可执行文件解压保存在 <code>C:\\pyChariot</code> 下：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    PYCHARIOT_HOME                      # C:\\pyChariot</span></span>
<span class="line"><span>        |   pyChariot.exe               # 文件：可执行文件，运行环境</span></span>
<span class="line"><span>        |   pyChariotKit.exe            # 文件：可执行文件，开发调试环境</span></span>
<span class="line"><span>        |</span></span>
<span class="line"><span>        +---pyChariot.files             # C:\\pyChariot\\pyChariot.files</span></span>
<span class="line"><span>                |</span></span>
<span class="line"><span>                +---temp                # 目录：临时文件目录</span></span>
<span class="line"><span>                |</span></span>
<span class="line"><span>                +---data                # 目录：应用数据目录</span></span>
<span class="line"><span>                |</span></span>
<span class="line"><span>                +---wvdata              # 目录：浏览器组件数据目录</span></span>
<span class="line"><span>                |</span></span>
<span class="line"><span>                \\---appchips            # 目录：小应用包目录</span></span></code></pre></div><p>然后，再按小应用的标识建立子目录，存放相应文件。 <br>例如，有个小应用，标识为 <code>{appchip_id}</code>，则：</p><ul><li>小应用的应用包文件目录： <code>PYCHARIOT_HOME/pyChariot.files/appchips/{appchip_id}</code>；</li><li>小应用的临时文件目录： <code>PYCHARIOT_HOME/pyChariot.files/temp/{appchip_id}</code>；</li><li>小应用的数据文件目录： <code>PYCHARIOT_HOME/pyChariot.files/data/{appchip_id}</code>；</li><li>小应用的浏览器组件数据目录： <code>PYCHARIOT_HOME/pyChariot.files/data/{appchip_id}</code>；</li></ul><p><br>这样约定的目的是为了更便捷统一的管理各种文件，请按此约定来分类存储对应的文件。</p>`,10)]))}const C=s(e,[["render",l]]);export{_ as __pageData,C as default};
