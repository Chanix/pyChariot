import{_ as n,C as d,c as p,o as h,j as i,ae as a,a as s,G as l}from"./chunks/framework.BLKehFbR.js";const F=JSON.parse('{"title":"pyChariot.device","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"jsapi_device.md","filePath":"jsapi_device.md"}'),r={name:"jsapi_device.md"},o={id:"isPOSIX",tabindex:"-1"},g={id:"isLinux",tabindex:"-1"},k={id:"isWindows",tabindex:"-1"},y={id:"isMacOS",tabindex:"-1"},b={id:"isFreeBSD",tabindex:"-1"},x={id:"isNetBSD",tabindex:"-1"},u={id:"isOpenBSD",tabindex:"-1"},E={id:"isBSD",tabindex:"-1"},S={id:"isSunOS",tabindex:"-1"},v={id:"isAIX",tabindex:"-1"},_={id:"getCPUCount",tabindex:"-1"},C={id:"getCPUTimes",tabindex:"-1"},c={id:"getCPUStats",tabindex:"-1"};function f(T,t,P,A,m,B){const e=d("Badge");return h(),p("div",null,[t[39]||(t[39]=i("h1",{id:"pychariot-device",tabindex:"-1"},[s("pyChariot.device "),i("a",{class:"header-anchor",href:"#pychariot-device","aria-label":'Permalink to "pyChariot.device"'},"​")],-1)),t[40]||(t[40]=i("p",null,"设备信息，当前运行设备的相关信息",-1)),i("h2",o,[t[0]||(t[0]=s("isPOSIX() ")),l(e,{type:"tip",text:"Since 25.3.5.1"}),t[1]||(t[1]=s()),t[2]||(t[2]=i("a",{class:"header-anchor",href:"#isPOSIX","aria-label":'Permalink to "isPOSIX() <Badge type="tip" text="Since 25.3.5.1" /> {#isPOSIX}"'},"​",-1))]),t[41]||(t[41]=a('<p>操作系统是否 POSIX</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isPOSIX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",g,[t[3]||(t[3]=s("isLinux() ")),l(e,{type:"tip",text:"Since 25.3.5.1"}),t[4]||(t[4]=s()),t[5]||(t[5]=i("a",{class:"header-anchor",href:"#isLinux","aria-label":'Permalink to "isLinux() <Badge type="tip" text="Since 25.3.5.1" /> {#isLinux}"'},"​",-1))]),t[42]||(t[42]=a('<p>操作系统是否 Linux</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isLinux</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",k,[t[6]||(t[6]=s("isWindows() ")),l(e,{type:"tip",text:"Since 25.3.5.1"}),t[7]||(t[7]=s()),t[8]||(t[8]=i("a",{class:"header-anchor",href:"#isWindows","aria-label":'Permalink to "isWindows() <Badge type="tip" text="Since 25.3.5.1" /> {#isWindows}"'},"​",-1))]),t[43]||(t[43]=a('<p>操作系统是否 Windows</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isWindows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",y,[t[9]||(t[9]=s("isMacOS() ")),l(e,{type:"tip",text:"Since 25.3.5.1"}),t[10]||(t[10]=s()),t[11]||(t[11]=i("a",{class:"header-anchor",href:"#isMacOS","aria-label":'Permalink to "isMacOS() <Badge type="tip" text="Since 25.3.5.1" /> {#isMacOS}"'},"​",-1))]),t[44]||(t[44]=a('<p>操作系统是否 MacOS</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isMacOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",b,[t[12]||(t[12]=s("isFreeBSD() ")),l(e,{type:"tip",text:"Since 25.3.5.1"}),t[13]||(t[13]=s()),t[14]||(t[14]=i("a",{class:"header-anchor",href:"#isFreeBSD","aria-label":'Permalink to "isFreeBSD() <Badge type="tip" text="Since 25.3.5.1" /> {#isFreeBSD}"'},"​",-1))]),t[45]||(t[45]=a('<p>操作系统是否 FreeBSD</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isFreeBSD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",x,[t[15]||(t[15]=s("isNetBSD() ")),l(e,{type:"tip",text:"Since 25.3.5.1"}),t[16]||(t[16]=s()),t[17]||(t[17]=i("a",{class:"header-anchor",href:"#isNetBSD","aria-label":'Permalink to "isNetBSD() <Badge type="tip" text="Since 25.3.5.1" /> {#isNetBSD}"'},"​",-1))]),t[46]||(t[46]=a('<p>操作系统是否 NetBSD</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNetBSD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",u,[t[18]||(t[18]=s("isOpenBSD() ")),l(e,{type:"tip",text:"Since 25.3.5.1"}),t[19]||(t[19]=s()),t[20]||(t[20]=i("a",{class:"header-anchor",href:"#isOpenBSD","aria-label":'Permalink to "isOpenBSD() <Badge type="tip" text="Since 25.3.5.1" /> {#isOpenBSD}"'},"​",-1))]),t[47]||(t[47]=a('<p>操作系统是否 OpenBSD</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isOpenBSD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",E,[t[21]||(t[21]=s("isBSD() ")),l(e,{type:"tip",text:"Since 25.3.5.1"}),t[22]||(t[22]=s()),t[23]||(t[23]=i("a",{class:"header-anchor",href:"#isBSD","aria-label":'Permalink to "isBSD() <Badge type="tip" text="Since 25.3.5.1" /> {#isBSD}"'},"​",-1))]),t[48]||(t[48]=a('<p>操作系统是否 BSD</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isBSD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",S,[t[24]||(t[24]=s("isSunOS() ")),l(e,{type:"tip",text:"Since 25.3.5.1"}),t[25]||(t[25]=s()),t[26]||(t[26]=i("a",{class:"header-anchor",href:"#isSunOS","aria-label":'Permalink to "isSunOS() <Badge type="tip" text="Since 25.3.5.1" /> {#isSunOS}"'},"​",-1))]),t[49]||(t[49]=a('<p>操作系统是否 SunOS</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isSunOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",v,[t[27]||(t[27]=s("isAIX() ")),l(e,{type:"tip",text:"Since 25.3.5.1"}),t[28]||(t[28]=s()),t[29]||(t[29]=i("a",{class:"header-anchor",href:"#isAIX","aria-label":'Permalink to "isAIX() <Badge type="tip" text="Since 25.3.5.1" /> {#isAIX}"'},"​",-1))]),t[50]||(t[50]=a('<p>操作系统是否 AIX</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"></td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isAIX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',3)),i("h2",_,[t[30]||(t[30]=s("getCPUCount(logical) ")),l(e,{type:"tip",text:"Since 25.3.5.1"}),t[31]||(t[31]=s()),t[32]||(t[32]=i("a",{class:"header-anchor",href:"#getCPUCount","aria-label":'Permalink to "getCPUCount(logical) <Badge type="tip" text="Since 25.3.5.1" /> {#getCPUCount}"'},"​",-1))]),t[51]||(t[51]=a('<p>获取 CPU 数量</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">logic</td><td style="text-align:left;">boolean</td><td style="text-align:left;">逻辑处理器，可忽略，默认为 true</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">int</td><td style="text-align:left;">CPU 数量</td></tr></tbody></table><p>如果 logical 为 false，仅返回物理内核的数量。如果 logical 为 true，返回逻辑内核的数量。 在 OpenBSD 和 NetBSD 上总是返回 null。 请注意， 可能不一定等于当前进程可以使用的实际 CPU 数量。 如果进程 CPU 亲和性已更改、正在使用 Linux cgroups 或（在 Windows 的情况下）在使用处理器组或具有超过 64 个 CPU 的系统上，这可能会有所不同。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPUCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPUCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>',6)),i("h2",C,[t[33]||(t[33]=s("getCPUTimes(percpu) ")),l(e,{type:"tip",text:"Since 25.3.5.1"}),t[34]||(t[34]=s()),t[35]||(t[35]=i("a",{class:"header-anchor",href:"#getCPUTimes","aria-label":'Permalink to "getCPUTimes(percpu) <Badge type="tip" text="Since 25.3.5.1" /> {#getCPUTimes}"'},"​",-1))]),t[52]||(t[52]=a('<p>获取 CPU 时间信息</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">percpu</td><td style="text-align:left;">boolean</td><td style="text-align:left;">详细列出每个内核，可忽略，默认为 false</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">object</td><td style="text-align:left;">CPU 时间信息</td></tr></tbody></table><p>列出CPU时间信息，其中每个属性代表 CPU 在给定模式下花费的秒数。属性可用性因平台而异。</p><ul><li>user: 进程在用户模式(user mode)下执行所花费的时间； 在 Linux 上，这也包括访客时间(guest time)。</li><li>system: 进程在内核模式(kernel mode)下执行所花费的时间。</li><li>idle: 空闲时间。</li></ul><p>特定平台的字段:</p><ul><li>nice (UNIX): niced(优先) 进程在用户模式(user mode)下所花费的时间; 在 Linux 上，这也包括访客优先时间(guest_nice time)。</li><li>iowait (Linux): 等待 I/O 完成所花费的时间。 这不计入空闲时间中。</li><li>irq (Linux, BSD): 服务硬件中断所花费的时间。</li><li>softirq (Linux): 服务软件中断所花费的时间。</li><li>steal (Linux 2.6.11+): 在虚拟化环境中运行的其他操作系统所花费的时间。</li><li>guest (Linux 2.6.24+): 在 Linux 内核的控制下为客户操作系统运行虚拟 CPU 所花费的时间</li><li>guest_nice (Linux 3.2.0+): niced(优先) 访客进程所花费的时间 (用于在 Linux 内核控制下的客户操作系统的虚拟 CPU)</li><li>interrupt (Windows): 服务硬件中断所花费的时间 ( 类似于 UNIX 上的“irq”)</li><li>dpc (Windows): 服务延迟过程调用服务中断 (DPC) 所花费的时间； DPC 是运行优先级低于标准中断(interrupts)的中断。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPUTimes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPUTimes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>',9)),i("h2",c,[t[36]||(t[36]=s("getCPUStats() ")),l(e,{type:"tip",text:"Since 25.3.5.1"}),t[37]||(t[37]=s()),t[38]||(t[38]=i("a",{class:"header-anchor",href:"#getCPUStats","aria-label":'Permalink to "getCPUStats() <Badge type="tip" text="Since 25.3.5.1" /> {#getCPUStats}"'},"​",-1))]),t[53]||(t[53]=a('<p>获取 CPU 统计信息</p><table tabindex="0"><thead><tr><th style="text-align:left;">返回值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">array[number]</td><td style="text-align:left;">CPU 统计信息</td></tr></tbody></table><p>CPU 统计信息：</p><ul><li>ctx_switches: 自启动以来的上下文切换次数（自愿 + 非自愿）.</li><li>interrupts: 自启动以来的中断数.</li><li>soft_interrupts: 自启动以来的软件中断数。 在 Windows 和 SunOS 上始终为 0.</li><li>syscalls: 自启动以来的系统调用数。 在 Linux 上始终为 0.</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.device.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCPUStats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>',5))])}const I=n(r,[["render",f]]);export{F as __pageData,I as default};
