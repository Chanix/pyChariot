import{_ as i,c as a,o as n,a0 as t}from"./chunks/framework.6RT3NpRm.js";const y=JSON.parse('{"title":"热键 / 快捷键","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"hotkey.md","filePath":"hotkey.md","lastUpdated":1741653582000}'),h={name:"hotkey.md"};function p(l,s,k,e,E,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="hotkey" tabindex="-1">热键 / 快捷键 <a class="header-anchor" href="#hotkey" aria-label="Permalink to &quot;热键 / 快捷键 {#hotkey}&quot;">​</a></h1><p>热键，又称为快捷键、快速键、或组合键，指通过某些特定的按键、按键顺序或按键组合来完成一个操作。 很多快捷键往往与辅助键，例如 <code>Ctrl</code>、<code>Shift</code>、<code>Alt</code>、<code>Fn</code>、<code>Cmd</code> 等配合使用。 热键的有效范围不一定相同：</p><ul><li>系统级快捷键可以全局响应，不论当前焦点在哪里、运行什么程序，按下时都能起作用；</li><li>小应用级热键只能在主窗口内起作用，当小应用不活动时，热键无效；</li></ul><h2 id="system_hotkey" tabindex="-1">系统级热键 <a class="header-anchor" href="#system_hotkey" aria-label="Permalink to &quot;系统级热键{#system_hotkey}&quot;">​</a></h2><p>pyChariot 支持系统级的全局热键，应用内的热键定义需要通过 JavaScript 脚本在小应用内实现。</p><p>当pyChariot装载小应用时，将读取约定的脚本文件，待主窗口装载完成后，创建热键定义。 例如 f1.js，则当 F1 被按下时，在主窗口执行 F1.JS 中的脚本。</p><p>如果不生效，请检查是否和系统原有的热键定义冲突了。</p><h2 id="appchip_hotkey" tabindex="-1">小应用级热键 <a class="header-anchor" href="#appchip_hotkey" aria-label="Permalink to &quot;小应用级热键{#appchip_hotkey}&quot;">​</a></h2><p>小应用层面的热键需要在小应用的js文件中定义；</p><p>例如下面这个例子，用原生代码实现了 <code>Ctrl+N</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;keydown&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 检查是否按下了 Ctrl 键</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Windows 和 Linux 上通常是 17，在 Mac 上是 91</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 但 Mac 使用 Cmd 键代替 Ctrl 键</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isCtrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.ctrlKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.metaKey; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// metaKey用于检测Mac的Cmd键</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 检查是否按下了N键（键码是78）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isCtrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.keyCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 78</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 阻止默认行为（尽管对于Ctrl+N这样的组合，浏览器可能不会执行默认行为）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 执行你的自定义函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        customFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> customFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这里定义你想要执行的操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Ctrl+N 被按下！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>也可以使用 HotKeys js-hotkey 等 js 库。</p><p>提醒：不要忘记扩展对象都是异步的，因此如果需要 await 返回，那么要使用异步方式，例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __A.mainwin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        __A.mainwin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">restore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        __A.mainwin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">minimize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre></div>`,14)]))}const c=i(h,[["render",p]]);export{y as __pageData,c as default};
