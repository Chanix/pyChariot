import{_ as i,c as s,o as t,a0 as e}from"./chunks/framework.6RT3NpRm.js";const c=JSON.parse('{"title":"JS 扩展对象概述","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"jsapi.md","filePath":"jsapi.md","lastUpdated":1740558638000}'),n={name:"jsapi.md"};function l(h,a,p,r,d,o){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="js-扩展对象概述" tabindex="-1">JS 扩展对象概述 <a class="header-anchor" href="#js-扩展对象概述" aria-label="Permalink to &quot;JS 扩展对象概述&quot;">​</a></h1><p>pyChariot 内置了扩展对象供 JavaScript 调用。因此，应用可以获得在浏览器中运行时无法获得的功能（例如读写本地文件，本地消息提醒）。</p><p>pyChariot 中所有的 JSAPI 皆考虑到跨平台，最大可能的保证在主流操作系统下行为一致。但由于操作系统的差异，某些功能存在差异或仅被限定的操作系统支持。</p><p>注意：所有 JSAPI 调用皆为异步调用模式，返回值皆为 Promise。 请使用异步编程（例如：callback, then, await, async...）， 具体请参阅 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noreferrer">JavaScript 相关文档</a> 。</p><h2 id="js-调用与返回" tabindex="-1">JS 调用与返回 <a class="header-anchor" href="#js-调用与返回" aria-label="Permalink to &quot;JS 调用与返回&quot;">​</a></h2><p>pyChariot 会在浏览器组件窗口装载完成之后新增对象： <code>window.Chariot</code>，之后触发事件 <code>ChariotReady</code>。 该准备工作完成以后就可以在 JavaScript 中调用扩展对象功能。否则，即 <code>ChariotReady</code> 事件触发之前，将会出现错误，可以通过侦听事件来解决这个问题。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ChariotReady&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pyChariot 已就绪。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>为了方便使用，pyChariot 将扩展按功能分成了多个模块，公开于 <code>window.Chariot.api</code> 下。 通过 <code>window.Chariot.api.&lt;模块名&gt;.&lt;函数名&gt;</code> 这样的方式来进行调用。 所有扩展调用函数，返回值皆为 Promise，为了方便说明理解，文档中的返回值按普通方式来编写。</p><p>为了简化写法，方便偷懒，定义了一些预设变量：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__C </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.Chariot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.Chariot.api</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.Chariot.token</span></span></code></pre></div><p>例如下面几个是等价的调用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.Chariot.api.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Chariot.api.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__A.core.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="模块列表" tabindex="-1">模块列表 <a class="header-anchor" href="#模块列表" aria-label="Permalink to &quot;模块列表&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">模块名称</th><th style="text-align:left;">功能描述</th><th style="text-align:center;">Test Text</th></tr></thead><tbody><tr><td style="text-align:left;">core</td><td style="text-align:left;">基础功能</td><td style="text-align:center;"><a href="./jsapi_core.html">点击查看</a></td></tr></tbody></table><h2 id="增加与完善" tabindex="-1">增加与完善 <a class="header-anchor" href="#增加与完善" aria-label="Permalink to &quot;增加与完善&quot;">​</a></h2><p>Chariot 以宁缺毋滥的态度来增加 JSAPI，现有扩展已满足大多数常见应用场景。</p><p>如果没有您需要的模块，可以 <a href="https://github.com/Chanix/pyChariot/issues" target="_blank" rel="noreferrer">在这里提出需求</a> 。 我们将定期整理，判断是否增加，并整理出优先顺序逐步完善。</p><ul><li>现有 API 缺陷的修复，优先级提高</li><li>需求量大，多人提出的，优先级提高</li><li>对项目有帮助的人员提出的，优先级提高</li><li>赞助者提出的，优先级提高</li></ul><p>请原谅我们的时间和精力有限，所有的需求都会尽量排期实现，但无法保证一定会被实现或何时实现。</p>`,19)]))}const E=i(n,[["render",l]]);export{c as __pageData,E as default};
